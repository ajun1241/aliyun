<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.modcreater.tmdao.mapper.GoodsMapper">

    <insert id="addNewGoods" useGeneratedKeys="true" keyProperty="id">
        insert into store_goods (storeId, goodsName, goodsBrand, goodsPicture, goodsBarCode,
        goodsSpecifications, goodsAllergen, goodsUnit, goodsTypeId, goodsFUnit, faUnitNum)
         values (#{storeId},#{goodsName},#{goodsBrand},#{goodsPicture},#{goodsBarCode},
         #{goodsSpecifications},#{goodsAllergen},#{goodsUnit},#{goodsTypeId},#{goodsFUnit},#{faUnitNum})
    </insert>
    <insert id="addNewGoodsStock">
        insert into store_goods_stock (goodsId,storeId, stockNum,goodsBarCode, goodsStatus)
        values (#{goodsId},#{storeId},#{stockNum},#{goodsBarCode},#{goodsStatus})
    </insert>
    <update id="updateGoods">
        update store_goods set
        goodsName = #{goodsName},
        goodsBrand = #{goodsBrand},
        goodsPicture = #{goodsPicture},
        goodsBarCode = #{goodsBarCode},
        goodsSpecifications = #{goodsSpecifications},
        goodsAllergen = #{goodsAllergen},
        goodsUnit = #{goodsUnit},
        goodsTypeId = #{goodsTypeId},
        goodsFUnit = #{goodsFUnit},
        faUnitNum = #{faUnitNum}
        where id = #{goodsId}
    </update>
    <update id="updateGoodsStock">
        update store_goods_stock set stockNum = #{goodsStock},goodsBarCode = #{goodsBarCode} where goodsId = #{goodsId} and storeId = #{storeId}
    </update>
    <update id="updateGoodsUnitPrice">
        update store_goods_stock set goodsPrice = #{goodsPrice}
        <if test="status != null">
            ,goodsStatus = #{status}
        </if>
         where goodsId = #{goodsId} and storeId = #{storeId}
    </update>
    <update id="updateGoodsStatus">
        update store_goods_stock set goodsStatus = #{status} where id = #{goodsId} and storeId = #{storeId}
    </update>
    <update id="deductionStock">
        <foreach collection="sourceGoods" item="sourceGoods" index="index" separator=";">
            update store_goods_stock set stockNum = stockNum - #{sourceGoods.num} where storeId=#{sourceStoreId} and goodsId=#{sourceGoods.goodsId}
        </foreach>
    </update>
    <update id="updGoodsStock">
        update store_goods_stock set stockNum=#{stockNum} where goodsId=#{goodsId} and storeId=#{storeId}
    </update>
    <update id="updateGoodsStockByBarCode">
        update store_goods_stock set stockNum =#{stockNum} where storeId=#{storeId} and goodsBarCode=#{goodsBarCode}
    </update>
    <update id="updateConsumable">
        update store_goodsconsumable
        set registeredRatioIn = #{registeredRatioIn},
        registeredRatioOut = #{registeredRatioOut},
        consumptionRate = #{consumptionRate}
        where id = #{consumableId}
    </update>
    <update id="updateCorRelation">
        update store_goods_correlation set goodsSonId = #{goodsSonId} where goodsParentId = #{goodsParentId}
    </update>
    <delete id="cleanConsumablesList">
        delete from store_goodsconsumable where goodsId = #{goodsId}
    </delete>
    <delete id="deleteGoodsConsumable">
        delete from store_goodsconsumable where id = #{consumableId}
    </delete>
    <delete id="deleteCorRelation">
        delete from store_goods_correlation where goodsParentId = #{goodsParentId}
    </delete>
    <delete id="deleteGoods">
        delete from store_goods_stock where storeId = #{storeId} and goodsId = #{goodsId}
    </delete>
    <select id="getGoodsList" resultType="java.util.Map">
        SELECT sg.*,sgs.`goodsPrice`,sgs.`stockNum` FROM store_goods sg
        INNER JOIN store_goods_stock sgs
        ON sg.id=sgs.`goodsId` WHERE sgs.storeId=#{storeId} AND sg.`goodsTypeId`=#{goodsTypeId}
        <if test=" goodsName != null and goodsName != ''" >
            and sg.goodsName like concat('%',#{goodsName},'%')
        </if>
        and sgs.goodsStatus = 1
        <if test=" pageIndex >= 0 and pageSize >= 0 " >
            limit #{pageIndex},#{pageSize}
        </if>
    </select>
    <insert id="addNewGoodsConsumable">
        insert into store_goodsconsumable (goodsId, consumableGoodsId,  registeredRatioIn,
        registeredRationInUnit, registeredRatioOut, registeredRationOutUnit, registeredTime, consumptionRate)
        values (#{goodsId},#{consumableGoodsId},#{registeredRatioIn},
        #{registeredRationInUnit},#{registeredRatioOut},#{registeredRationOutUnit},#{registeredTime},#{consumptionRate});
    </insert>
    <insert id="bindingGoods">
        insert into store_goods_correlation (goodsParentId, goodsSonId) values (#{id},#{corId})
    </insert>
    <insert id="insertStoreGoodsStock">
        insert into  store_goods_stock (goodsId, storeId, stockNum, goodsStatus,goodsBarCode) values (#{goodsId},#{storeId},#{stockNum},#{goodsStatus},#{goodsBarCode})
    </insert>
    <insert id="saveQrCode" useGeneratedKeys="true" keyProperty="id">
        insert into store_qr_code (id,codeContent) values (#{id},#{codeContent})
    </insert>
    <insert id="saveStoreOfflineOrders">
        insert into store_offline_orders (orderNumber, sourceStoreId, userId, goodsListId, paymentAmount,  payTime, payChannel, outTradeNo)
        values (#{orderNumber},#{sourceStoreId},#{userId},#{goodsListId},#{paymentAmount},#{payTime},#{payChannel},#{outTradeNo})
    </insert>
    <insert id="addNewTemStock">
        insert into store_goods_temstock (temStockContent,offlineOrderNum) values (#{temStock},#{offlineOrderNum})
    </insert>
    <insert id="addNewSalesVolume">
        insert into store_sales_volume (orderNumber, storeId, goodsId, num) values (#{orderNumber},#{storeId},#{goodsId},#{num})
    </insert>
    <select id="getGoodsInfo" resultType="com.modcreater.tmbeans.pojo.StoreGoods">
        select * from store_goods where id = #{goodsId}
    </select>
    <select id="getGoodsTypeList" resultType="java.util.Map">
        select * from store_goods_type where id IN
        (SELECT sg.goodsTypeId FROM store_goods sg
        INNER JOIN store_goods_stock sgs
        ON sg.id=sgs.`goodsId` WHERE sgs.storeId=#{storeId} and sgs.goodsStatus = 1)
    </select>
    <select id="getGoodsStockList" resultType="com.modcreater.tmbeans.show.goods.ShowGoodsStockInfo">
        select sg.id goodsId,sg.goodsPicture goodsPicture,sg.goodsName goodsName,
        sgt.type goodsType,sg.goodsUnit goodsUnit,sum(sgk.stockNum) goodsStock
        from store_goods sg,store_goods_stock sgk,store_goods_type sgt
        where sg.id = sgk.goodsId and sgt.id = sg.goodsTypeId and sgk.storeId = #{storeId} and sgk.goodsStatus = 1
        <if test="goodsName != '' and goodsName != null">
            and
            (sg.goodsName like "%"#{goodsName}"%"
            or sg.goodsBrand like "%"#{goodsName}"%"
            or sg.goodsSpecifications like "%"#{goodsName}"%")
        </if>
        group by sgk.goodsId
        limit #{pageNum},#{pageSize}
    </select>
    <select id="getGoodsPriceList" resultType="com.modcreater.tmbeans.show.goods.ShowGoodsPriceInfo">
        select sg.id goodsId,sg.goodsPicture goodsPicture,sg.goodsName goodsName,
        sgt.type goodsType,sg.goodsUnit goodsUnit,sgk.goodsPrice goodsPrice
        from store_goods sg,store_goods_type sgt,store_goods_stock sgk
        where sgt.id = sg.goodsTypeId and sg.id = sgk.goodsId and sgk.storeId = #{storeId} and sgk.goodsStatus = 1
        <if test="goodsName != '' and goodsName != null">
            and
            (sg.goodsName like "%"#{goodsName}"%"
            or sg.goodsBrand like "%"#{goodsName}"%"
            or sg.goodsSpecifications like "%"#{goodsName}"%")
        </if>
        group by sg.id
        limit #{pageNum},#{pageSize}
    </select>
    <select id="getStoreMaster" resultType="java.lang.Long">
        select count(id) from store_info where id = #{storeId} and userId = #{userId}
    </select>
    <select id="getGoodsAllTypeList" resultType="java.util.Map">
        select * from store_goods_type where id != 2
    </select>
    <select id="getConsumableGoods" resultType="com.modcreater.tmbeans.show.goods.ShowConsumableGoods">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,
        sg.goodsUnit,sgs.stockNum goodsStock,(select type from store_goods_type sgt where sgt.id = sg.goodsTypeId) goodsType
        from store_goods sg,store_goods_stock sgs
        where sg.id = sgs.goodsId and sgs.storeId = #{storeId} and sgs.goodsStatus = 1
        <if test="goodsName != '' and goodsName != null">
            and
            (sg.goodsName like "%"#{goodsName}"%"
            or sg.goodsBrand like "%"#{goodsName}"%"
            or sg.goodsSpecifications like "%"#{goodsName}"%")
        </if>
        group by sg.id
        limit #{pageNum},#{pageSize}
    </select>
    <select id="getGoodsUnit" resultType="java.util.Map">
        select id unitId,name unitName from store_goods_unit where type = 1 and (createBy = 100000 or createBy = #{userId}) order by createTime desc
    </select>
    <select id="getCorRelation" resultType="java.lang.Integer">
        select count(id) from store_goods_correlation where (goodsParentId = #{corGoodsId} or goodsSonId =#{corGoodsId})
    </select>
    <select id="getCorGoods" resultType="com.modcreater.tmbeans.show.goods.ShowConsumableGoods">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,
        sg.goodsUnit,sgs.stockNum goodsStock,(select type from store_goods_type sgt where sgt.id = sg.goodsTypeId) goodsType
        from store_goods sg,store_goods_stock sgs
        where sg.id = sgs.goodsId
        and sg.id not in (${corIds}) and sgs.goodsStatus = 1 and sgs.storeId = #{getGoodsStockList.storeId}
        <if test="getGoodsStockList.goodsName != '' and getGoodsStockList.goodsName != null">
            and
            (sg.goodsName like "%"#{getGoodsStockList.goodsName}"%"
            or sg.goodsBrand like "%"#{getGoodsStockList.goodsName}"%"
            or sg.goodsSpecifications like "%"#{getGoodsStockList.goodsName}"%")
        </if>
        limit #{getGoodsStockList.pageNum},#{getGoodsStockList.pageSize}
    </select>
    <select id="getCorGoodsId" resultType="java.lang.String">
        select goodsParentId goodsId from store_goods_correlation union select goodsSonId goodsId from store_goods_correlation
    </select>
    <select id="isBarCodeExists" resultType="java.lang.Integer">
        select count(id) from store_goods where storeId = #{storeId} and goodsBarCode = #{goodsBarCode}
    </select>
    <select id="getGoodsStock" resultType="com.modcreater.tmbeans.pojo.StoreGoodsStock">
        select * from store_goods_stock where goodsId = #{goodsId} and storeId = #{storeId}
    </select>
    <select id="queryGoodsStock" resultType="com.modcreater.tmbeans.pojo.StoreGoodsStock">
        select * from store_goods_stock where goodsId=#{goodsId} and storeId=#{storeId}
    </select>
    <select id="getGoodsStockByGoodsBarCode" resultType="com.modcreater.tmbeans.pojo.StoreGoodsStock">
        select * from store_goods_stock where storeId=#{storeId} and goodsBarCode=#{goodsBarCode}
    </select>
    <select id="getSonGoodsInfo" resultType="com.modcreater.tmbeans.pojo.StoreGoodsCorrelation">
        select * from store_goods_correlation where goodsParentId = #{goodsId}
    </select>
    <select id="getParentGoodsInfo" resultType="com.modcreater.tmbeans.pojo.StoreGoodsCorrelation">
        select * from store_goods_correlation where goodsSonId = #{goodsId}
    </select>
    <select id="getGoodsInfoToUpdate" resultType="com.modcreater.tmbeans.show.goods.GoodsInfoToUpdate">
        select sg.id goodsId,sg.goodsName,sg.goodsBrand,sg.goodsPicture,(select type from store_goods_type sgt where sgt.id = sg.goodsTypeId) goodsType,
        sgs.stockNum goodsStock,sg.goodsUnit,sg.goodsFUnit,sg.faUnitNum,sg.goodsBarCode,sg.goodsSpecifications
        from store_goods sg,store_goods_stock sgs
        where sg.id = sgs.goodsId and sg.id = #{goodsId} and sgs.storeId = #{storeId}
    </select>
    <select id="getGoodsConsumablesList" resultType="com.modcreater.tmbeans.show.goods.ShowConsumable">
        select sgc.id consumableId ,sgc.consumableGoodsId goodsId,sg.goodsName,sg.goodsPicture,sgc.registeredRatioIn,
        sgc.registeredRationInUnit,sgc.registeredRatioOut,sgc.registeredRationOutUnit
        from store_goodsconsumable sgc,store_goods sg
        where sgc.consumableGoodsId = sg.id and sgc.goodsId = #{goodsId}
        <if test="goodsName != '' and goodsName != null">
            and
            (sg.goodsName like "%"#{goodsName}"%"
            or sg.goodsBrand like "%"#{goodsName}"%"
            or sg.goodsSpecifications like "%"#{goodsName}"%")
        </if>
        <if test="pageNum != 0">
            limit #{pageNum},#{pageSize}
        </if>
    </select>
    <select id="queryQrCodeContent" resultType="java.lang.String">
        select codeContent from store_qr_code where id=#{code}
    </select>
    <select id="getUpdateConsumableInfo" resultType="com.modcreater.tmbeans.show.goods.ShowUpdateConsumableInfo">
        select sgc.id consumableId, sg.goodsName, sgc.registeredRatioIn, sgc.registeredRationInUnit, sgc.registeredRatioOut, sgc.registeredRationOutUnit
        from store_goodsconsumable sgc,store_goods sg
        where sgc.id = #{consumableId} and sgc.goodsId = sg.id
    </select>
    <update id="updateOfflineOrder">
        update store_offline_orders set
        payTime = #{payTime},
        payChannel = #{payChannel},
        outTradeNo = #{outTradeNo},
        orderStatus = #{orderStatus}
        where orderNumber = #{orderNumber}
    </update>
    <update id="updateGoodsStockNum">
        update store_goods_stock set stockNum = #{stockNum} where storeId = #{storeId} and goodsId = #{goodsId}
    </update>
    <update id="makeOrderFailed">
        update store_offline_orders set orderStatus = 3 where orderNumber = #{orderNum} and orderStatus = 0 and now() - createDate >= #{seconds}
    </update>
    <update id="resumeStock">
        update store_goods_stock set stockNum = stockNum + #{num} where storeId = #{storeId} and goodsBarCode = #{goodsBarCode}
    </update>
    <select id="getOfflineOrder" resultType="com.modcreater.tmbeans.pojo.StoreOfflineOrders">
        select * from store_offline_orders where orderNumber = #{tradeNo}
    </select>
    <select id="getCodeContent" resultType="java.lang.String">
        select codeContent from store_qr_code where id = #{goodsListId}
    </select>
    <select id="getGoodsAllConsumablesList" resultType="com.modcreater.tmbeans.pojo.StoreGoodsConsumable">
        select * from store_goodsconsumable where goodsId = #{goodsId}
    </select>
    <select id="getTimeOutOrders" resultType="com.modcreater.tmbeans.pojo.StoreOfflineOrders">
        select * from store_offline_orders where orderStatus = 0 and now() - createDate >= #{seconds}
    </select>
    <select id="getTemStock" resultType="java.lang.String">
        select temStockContent from store_goods_temstock where offlineOrderNum = #{orderNumber}
    </select>
    <select id="getTradedStoreIds" resultType="java.lang.String">
        select spr.targetStoreId from store_purchase_records spr ,store_info si
        where spr.sourceStoreId = #{storeId} and spr.targetStoreId = si.id
        <if test="storeName != null and storeName != ''">
            and si.storeName like "%"#{storeName}"%"
        </if>
        group by spr.targetStoreId limit #{pageNum},#{pageSize}
    </select>
    <select id="getOrderGoodsList" resultType="com.modcreater.tmbeans.pojo.StorePurchaseRecords">
        select * from store_purchase_records where sourceStoreId = #{sourceStoreId} and targetStoreId = #{targetStoreId}
        <if test="condition == 'binded'">
            and changeGoodsId is not null
        </if>
        <if test="condition == 'unbinded'">
            and changeGoodsId is null
        </if>
    </select>
    <select id="getCurrentOrderGoodsList" resultType="com.modcreater.tmbeans.pojo.StorePurchaseRecords">
        select * from
        (select spr.goodsId,sum(spr.goodsCount) goodsCount,spr.orderNumber,spr.createDate,spr.goodsId changeGoodsId
        from store_purchase_records spr ,store_goods sg
        where spr.goodsId = sg.id
        and spr.changeGoodsId is null
        and spr.orderNumber = #{orderNumber}
		and spr.status = 1
        <if test="goodsName != null and goodsName != ''">
            and sg.goodsName like "%"#{goodsName}"%"
        </if>
        group by spr.goodsId
        order by spr.goodsCount desc) a
        union all
        select * from
        (select spr.goodsId,sum(spr.goodsCount * sg.faUnitNum) goodsCount,spr.orderNumber,spr.createDate,spr.changeGoodsId
        from store_purchase_records spr ,store_goods sg
        where spr.goodsId = sg.id
        and spr.changeGoodsId is not null
        and spr.orderNumber = #{orderNumber}
		and spr.status = 1
        <if test="goodsName != null and goodsName != ''">
            and sg.goodsName like "%"#{goodsName}"%"
        </if>
        group by spr.goodsId
        order by spr.goodsCount desc) b
        <if test="pageNum != null">
            limit #{pageNum},#{pageSize}
        </if>
    </select>
    <select id="getCurrentOrder" resultType="com.modcreater.tmbeans.pojo.StorePurchaseRecords">
        select * from store_purchase_records where targetStoreId = #{targetStoreId} and sourceStoreId = #{sourceStoreId}
        group by createDate order by createDate desc limit 0,1
    </select>
    <select id="getOrderGoodsIds" resultType="java.util.Map">
        select * from
        (select spr.goodsId,sum(spr.goodsCount) totalNum,sg.goodsUnit unit
        from store_purchase_records spr ,store_goods sg
        where spr.goodsId = sg.id
        and spr.changeGoodsId is null
        and targetStoreId = #{storeId}
        group by goodsId
        order by totalNum desc) a
        union all
        select * from
        (select spr.goodsId,sum(spr.goodsCount * sg.faUnitNum) totalNum,sg.goodsFUnit unit
        from store_purchase_records spr ,store_goods sg
        where spr.goodsId = sg.id
        and spr.changeGoodsId is not null
        and targetStoreId = #{storeId}
        group by goodsId
        order by totalNum desc) b
    </select>
    <select id="getSalesVolumeByCreateTime" resultType="java.util.Map">
        select orderNumber,goodsId,sum(num) num,createTime from store_sales_volume where goodsId = #{goodsId} and createTime >= DATE_FORMAT(#{time},'%Y-%m-%d %H:%i:%S') group by goodsId
    </select>
    <select id="getGoodsFirstPurchaseTime" resultType="java.util.Date">
        select createDate from store_purchase_records
        where sourceStoreId = #{sourceStoreId}
        and targetStoreId = #{targetStoreId}
        and goodsId = #{goodsId}
        order by createDate asc
        limit 0,1
    </select>
    <select id="getPurchaseRecordsByOrderNumber" resultType="com.modcreater.tmbeans.pojo.StorePurchaseRecords">
        select * from
        (select spr.goodsId,sum(spr.goodsCount) goodsCount,spr.orderNumber,spr.createDate,spr.goodsId changeGoodsId,spr.targetStoreId,spr.sourceStoreId
        from store_purchase_records spr ,store_goods sg
        where spr.goodsId = sg.id
        and spr.changeGoodsId is null
        and spr.orderNumber = #{orderNumber}
        and spr.status = 1
        <if test="goodsName != null and goodsName != ''">
            and sg.goodsName like "%"#{goodsName}"%"
        </if>
        group by spr.goodsId
        order by spr.goodsCount desc) a
        union all
        select * from
        (select spr.goodsId,sum(spr.goodsCount * sg.faUnitNum) goodsCount,spr.orderNumber,spr.createDate,spr.changeGoodsId,spr.targetStoreId,spr.sourceStoreId
        from store_purchase_records spr ,store_goods sg
        where spr.goodsId = sg.id
        and spr.changeGoodsId is not null
        and spr.orderNumber = #{orderNumber}
        and spr.status = 1
        <if test="goodsName != null and goodsName != ''">
            and sg.goodsName like "%"#{goodsName}"%"
        </if>
        group by spr.goodsId
        order by spr.goodsCount desc) b
        <if test="pageNum != null">
            limit #{pageNum},#{pageSize}
        </if>
    </select>
    <select id="getCurrentOrders" resultType="com.modcreater.tmbeans.pojo.StorePurchaseRecords">
        select * from store_purchase_records where targetStoreId = #{targetStoreId} and sourceStoreId = #{sourceStoreId}
        group by createDate order by createDate desc
    </select>
    <select id="getOrderNumbersGroupByOrderNumber" resultType="com.modcreater.tmbeans.pojo.StorePurchaseRecords">
        select * from store_purchase_records spr ,store_info si
        where si.id = spr.targetStoreId and spr.sourceStoreId = #{storeId}
        <if test="storeName != null and storeName != ''">
            and si.storeName like "%"#{storeName}"%"
        </if>
        and spr.status = 1
        group by orderNumber
        order by orderNumber
        <if test="pageNum != null">
            limit #{pageNum},#{pageSize}
        </if>
    </select>
    <select id="getGoodsSalesVolume" resultType="java.lang.Long">
        select IFNULL(sum(num), 0) from store_sales_volume where storeId=#{storeId} and goodsId=#{goodsId} and createTime between #{toDay} and #{targetDay}
    </select>
    <select id="getGoodsStockNum" resultType="java.lang.Long">
        select stockNum from store_goods_stock where goodsId=#{goodsId} and storeId=#{storeId}
    </select>
    <select id="getForSaleGoodsNum" resultType="java.lang.Long">
        select count(1) from store_goods_stock where storeId = #{storeId} and goodsStatus = 1 and stockNum != 0
    </select>
    <select id="getSoldOutGoodsNum" resultType="java.lang.Long">
        select count(1) from store_goods_stock where storeId = #{storeId} and stockNum = 0
    </select>
    <select id="getForSaleGoodsList" resultType="java.util.Map">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,sgt.type,sgs.goodsPrice,sg.goodsUnit,sgs.stockNum
        from store_goods sg,store_goods_type sgt,store_goods_stock sgs
        where sg.id = sgs.goodsId and sgt.id = sg.goodsTypeId and sgs.storeId = #{storeId} and sgs.goodsStatus = 1 and sgs.stockNum &gt;= 1
        <if test="goodsName != '' and goodsName != null">
            and (sg.goodsName like "%"#{goodsName}"%" or sg.goodsBrand like "%"#{goodsName}"%")
        </if>
        limit #{pageNum},#{pageSize}
    </select>
    <select id="getSoldOutGoodsList" resultType="java.util.Map">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,sgt.type,sgs.goodsPrice,sg.goodsUnit,sgs.stockNum
        from store_goods sg,store_goods_type sgt,store_goods_stock sgs
        where sg.id = sgs.goodsId and sgt.id = sg.goodsTypeId and sgs.storeId = #{storeId} and sgs.stockNum &lt;= 0
        <if test="goodsName != '' and goodsName != null">
            and (sg.goodsName like "%"#{goodsName}"%" or sg.goodsBrand like "%"#{goodsName}"%")
        </if>
        limit #{pageNum},#{pageSize}
    </select>
    <select id="getMyGoodsTypes" resultType="java.lang.Long">
        select sgt.id from store_goods_type sgt,store_goods sg ,store_goods_stock sgs
        where sgt.id = sg.goodsTypeId and sgs.goodsId = sg.id and sgs.storeId = #{storeId} and sgs.goodsStatus = 1 group by sg.goodsTypeId
    </select>
    <select id="getManageGoodsGroupByGoodsTypeId" resultType="java.util.Map">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,sgs.goodsPrice,sg.goodsUnit,sgs.stockNum,sgt.type,sg.goodsTypeId
        from store_goods sg,store_goods_stock sgs,store_goods_type sgt
        where sgt.id = sg.goodsTypeId and sg.id = sgs.goodsId and sgs.storeId = #{storeId} and sg.goodsTypeId = #{typeId}
    </select>
    <select id="getManageGoodsGroupByGoodsTypeIdNum" resultType="java.lang.Integer">
        select count(1)
        from store_goods sg,store_goods_stock sgs,store_goods_type sgt
        where sgt.id = sg.goodsTypeId and sg.id = sgs.goodsId and sgs.storeId = #{storeId} and sg.goodsTypeId = #{typeId}
    </select>
    <select id="getTypeName" resultType="java.lang.String">
        select type from store_goods_type where id = #{typeId}
    </select>
    <select id="getPricedGoodsList" resultType="java.util.Map">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,sg.goodsUnit,sgs.goodsPrice,sgs.stockNum
        from store_goods sg,store_goods_stock sgs
        where sg.id = sgs.goodsId and sgs.storeId = #{storeId} and sgs.goodsStatus = 1
        limit #{pageNum},#{pageSize}
    </select>
    <select id="getNoPricingGoodsList" resultType="java.util.Map">
        select sg.id goodsId,sg.goodsPicture,sg.goodsName,sg.goodsUnit,sgs.goodsPrice,sgs.stockNum
        from store_goods sg,store_goods_stock sgs
        where sg.id = sgs.goodsId and sgs.storeId = #{storeId} and sgs.goodsStatus = 3
        limit #{pageNum},#{pageSize}
    </select>
</mapper>